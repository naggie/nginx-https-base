# configured for authelia 3.7.1
# NOTE redirecnt behaviour will change in future authelia versions https://github.com/clems4ever/authelia/commit/48d6107b0b9e1a028046a230ebfe0e971cbac044
# NOTE cookie name will probably change in future authelia versions https://github.com/clems4ever/authelia/issues/235
server {
    server_name {{item.domain}};

    {% include 'sslcrt.conf' %}

    include server_defaults;


    location / {
        proxy_pass {{item.target}};

        # set to $proxy_params if server requires given hostname
        proxy_set_header Host {{item.Host|default("$host")}};

        include proxy_params;

        # useful when the upstream server must receive a POST request (for
        # instance) byte-by-byte. This is important in some cases, for
        # instance when using the NGINX upload progress module.
        # In this case it is also prudent to delegate the client_max_body_size
        # to the upstream server as no buffering is done on this server anyway,
        # so the setting has no use.
        {% if item.disable_proxy_request_buffering|default(false) %}
        proxy_request_buffering off;
        client_max_body_size 0;
        {% endif %}

        {% if item.rewrite_origin_and_referrer|default(false) %}
        # replace hostname in Referer and Origin headers to avoid triggering a
        # CORS error without cause
        # Importantly, only rewrite request/origin headers coming from the forward domain
        set $new_referer $http_referer;
        if ($http_referer ~ "^(.+?){{ item.domain }}(.*)$") {
            set $new_referer "$1{{ item.target | regex_replace('^https?://([\w\.]+(:[0-9]+)?).*$', '\\1') }}$2";
        }
        proxy_set_header Referer $new_referer;

        set $new_origin $http_origin;
        if ($http_origin ~ "^(.+?){{ item.domain }}(.*)$") {
            set $new_origin "$1{{ item.target | regex_replace('^https?://([\w\.]+(:[0-9]+)?).*$', '\\1') }}";
        }
        proxy_set_header Origin $new_origin;
        {% endif %}

        auth_request /auth_verify;
        auth_request_set $user $upstream_http_remote_user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header X-Forwarded-User $user;
        proxy_set_header Remote-Groups $groups;
        set $target_url $scheme://$http_host$request_uri;

        proxy_intercept_errors on;
        error_page 401 =302 {{item.authelia_external_url}}?rd=$target_url;
        error_page 403 /_errors/denied.html;
        error_page 404 /_errors/notfound.html;
        error_page 400 500 501 503 /_errors/error.html;
        error_page 502 504 /_errors/offline.html;
        error_page 413 /_errors/ratelimit.html;

        # Hide authelia cookie from upstream to prevent possible session stealing attack.
        # see https://github.com/clems4ever/authelia/issues/178
        set $new_cookie $http_cookie;
        if ($http_cookie ~ "(.*)(?:^|;)\s*authelia_session=[^;]+(.*)") {
            set $new_cookie $1$2;
        }
        proxy_set_header Cookie $new_cookie;

        location /auth_verify {
            internal;
            proxy_set_header Host $http_host;

            proxy_set_header X-Original-Uri $request_uri;
            proxy_set_header X-Original-Url $scheme://$http_host$request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_intercept_errors off;

            proxy_pass_request_body off;
            proxy_set_header Content-Length "";

            proxy_pass {{item.authelia_internal_url}}api/verify;

            # low TTL cache -- allowing concurrent requests to be authorised with a single request
            # cache must be served to the same session only -- this is
            # guaranteed by including the authelia_session cookie.
            proxy_cache auth_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_key "$scheme$proxy_host$realip_remote_addr$cookie_authelia_session";

        }

        {{item.location_extra|default('')|indent(8)}}
    }
}
