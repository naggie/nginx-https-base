- name: trust nginx apt server
  become: yes
  apt_key:
    data: "{{ lookup('file', 'nginx_signing.key') }}"
    state: present

- name: add nginx apt-sources for mainline
  become: yes
  apt_repository:
    repo: "{{item}}"
    state: present
    filename: nginx
  with_items:
    - deb http://nginx.org/packages/mainline/ubuntu/ xenial nginx
    - deb-src http://nginx.org/packages/mainline/ubuntu/ xenial nginx

- name: add certbot PPA
  become: yes
  apt_repository:
    repo: 'ppa:certbot/certbot'
    state: present
    update_cache: yes

# the non-nginx specific version is chosen as nginx configurations are managed
# by this ansible role -- we don't want certbot to mangle them.
- name: install certbot, openssl
  apt:
    name:
      - certbot
      - openssl
    state: latest
    update_cache: yes
  become: yes

# this is separate, as triggering a restart of nginx should only be done if
# necessary (in the first instance, installing from the mainline nginx repo) -
- name: install nginx
  apt:
    name: nginx
    state: latest
    update_cache: yes
  become: yes
  notify:
    - restart nginx

# https://weakdh.org/sysadmin.html
- name: Generate secure dhparams
  command: openssl dhparam -out /etc/nginx/dhparams.pem 2048
  args:
    creates:
      /etc/nginx/dhparams.pem
  become: true
  notify:
    - reload nginx

- name: Copy nginx config files for HTTP challenge + SSL settings
  copy:
    src: "{{item}}"
    dest: /etc/nginx/
  with_items:
    - nginx.conf
    - server_defaults
    - proxy_params
    - uwsgi_params
  become: yes
  notify:
    - reload nginx

- name: Remove default http nginx vhost
  become: yes
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify:
    - reload nginx

- name: make error_pages directory
  become: yes
  file:
    path: /var/www/error_pages/
    state: directory
    owner: www-data
    group: www-data

- name: make sure conf.d/sites-enabled exists
  become: yes
  file:
    path: "{{item}}"
    state: directory
    mode: 0755
  with_items:
    - /etc/nginx/sites-enabled
    - /etc/nginx/conf.d

- name: make HTTP challenge directory
  become: yes
  file:
    path: /var/www/letsencrypt/.well-known
    state: directory
    owner: www-data
    group: www-data

- name: Copy HTML error pages if they're not already there
  # override them if you like, with a role that uses this role.
  copy:
    src: "error_pages/{{item}}"
    dest: /var/www/error_pages/
    owner: www-data
    group: www-data
    force: no
  with_items:
    - error.html
    - offline.html
    - denied.html
    - notfound.html
    - ratelimit.html
  become: yes
  notify:
    - reload nginx

# nginx needs to be restarted if changed before letsencrypt challenge! -- but only if handler would have run otherwise
- meta: flush_handlers

- name: Remove letsencrypt config in case migration to fixed certs was performed
  become: yes
  file:
    path: /etc/letsencrypt/renewal/{{item.domain}}.conf
    state: absent
  with_items: "{{sites}}"
  when: item.fixed_crt is defined


- name: Copy fixed certs if fixed_crt is defined
  copy:
    src: "{{item.fixed_crt}}"
    dest: "/etc/ssl/certs/{{item.domain}}.crt"
  with_items: "{{sites}}"
  when: item.fixed_crt is defined
  become: true
  notify:
    - reload nginx

- name: Copy fixed keys if fixed_crt is defined
  copy:
    src: "{{item.fixed_key}}"
    dest: "/etc/ssl/private/{{item.domain}}.key"
  with_items: "{{sites}}"
  when: item.fixed_crt is defined
  become: true
  notify:
    - reload nginx

- name: Remove associated letsencrypt config if renewal config is missing (else the directory will be in a broken state)
  become: yes
  with_items: "{{sites}}"
  ignore_errors: yes
    # command is used instead of native ansible equivalent as it's much more concise in this case
  command: "rm -rf /etc/letsencrypt/archive/{{item.domain}} /etc/letsencrypt/live/{{item.domain}}"
  args:
    # effectively runs if the renewal config is missing -- note that techically this only has to happen if fixed_crt is
    # defined but previous versions of nginx-https-base left this broken.
    creates: /etc/letsencrypt/renewal/{{item.domain}}.conf

- name: Initialise domains + grab initial certs
  command: certbot certonly -n --agree-tos --webroot --webroot-path /var/www/letsencrypt --email {{admin_email}} -d {{item.domain}}
  args:
    creates: /etc/letsencrypt/renewal/{{item.domain}}.conf
  with_items: "{{sites}}"
  when: item.fixed_crt is not defined
  become: true
  become_user: certbot
  notify:
    - reload nginx

- name: Create nginx sites
  template:
    src: "{{item.template}}"
    dest: /etc/nginx/sites-enabled/{{item.domain}}.conf
  become: yes
  with_items: "{{sites}}"
  notify:
    - reload nginx

- name: Fix logrotate with nginx/rsyslog (16.04)
  copy:
    src: logrotate.d/nginx
    dest: "/etc/logrotate.d/{{item}}"
    mode: 0644
  become: yes
  with_items:
    - nginx
    - rsyslog
